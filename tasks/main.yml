---

- name: Get the "from" site
  set_fact:
    from_site: "{{ from|default(canonical_primary_url) }}"

- name: create a list of db names
  set_fact:
    canonical_db_names:
      - "{{ canonical_cms_db_name }}"
      - "{{ canonical_crm_db_name }}"
      - "{{ canonical_crm_logging_db_name | default(canonical_crm_db_name, true) }}"
    db_names:
      - "{{ cms_db_name }}"
      - "{{ crm_db_name }}"
      - "{{ crm_logging_db_name | default(crm_db_name, true) }}"

- name: create a list of unique db names
  set_fact:
    canonical_db_names_unique: "{{ canonical_db_names | unique }}"
    db_names_unique: "{{ db_names | unique }}"

# Normally, sql-dumps is parallel with the webroot.  In certain situations (when gitroot is above webroot) this folder may not exists and creating it screws up git cloning.  
# In that situation, we'll use a temp directory and create sql-dumps next time, once we have a .gitignore in place.
- name: Check if .gitignore exists
  stat:
    path: "{{ gitroot }}/.gitignore"
  register: gitignore

- name: Create sql-dumps folder
  file:
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    path: "{{ webroot }}/../sql-dumps"
    state: directory
    mode: 02770
  become_user: "{{ run_as_user }}"
  when: gitignore.stat.exists

- name: Check if sql-dumps dir exists
  stat:
    path: "{{ webroot }}/../sql-dumps"
  register: dumps_dir

- name: Set the sql-dumps directory var
  set_fact:
    sql_dumps_dir: "{{ webroot + '/../sql-dumps' if dumps_dir.stat.exists else '/tmp' }}"


# MySQL restore
- name: Check if db dump files already exist
  stat:
    path: "{{ sql_dumps_dir }}/{{ canonical_cms_db_name }}.sql"
  register: db_dump

# Return yes when we FAIL the assertion, meaning "restore a db backup".
- name: Update the dump if a canonical db exists unless a dump already exists and is < 24hrs old
  assert:
    that:
      - "canonical_hostname is none or (db_dump.stat.exists == true and (ansible_date_time.epoch|int - db_dump.stat.mtime) < (60 * 60 * 24))"
    msg: "yes"
  failed_when: false
  register: acquire_db_backup

# Acquire a backup from rsync.net
- block:
  # This is so fucking ugly. Newer versions of borgbackup eliminate the need for piping to tail and cut, but we probably won't have them until Debian 10 ships.
  - name: Get the latest backup archive name
    shell: borg list --remote-path /usr/local/bin/borg1/borg1 {{ rsyncnet_user }}@{{ rsyncnet_server }}:{{ canonical_server_client + '-' + canonical_hostname }} | tail -n1 | cut -f 1 -d ' '
    environment:
      BORG_PASSPHRASE: "{{ lookup('passwordstore', canonical_server_client + '/' + canonical_hostname + '/borg/remote') }}"
    args:
      chdir: "{{ sql_dumps_dir }}"
    register: archive_name
    changed_when: false
    become_user: root

  # Download the borg backup of the db dump if we need an update and the borg backup exists.
  - name: Download the latest copy of the database
    shell: borg extract --strip-components 4 --remote-path /usr/local/bin/borg1/borg1 {{ rsyncnet_user }}@{{ rsyncnet_server }}:{{ canonical_server_client + '-' + canonical_hostname }}::{{ archive_name.stdout }} var/backups/mysql/sqldump/{{ db_name }}.sql.gz
    args:
      chdir: "{{ sql_dumps_dir }}"
    environment:
      BORG_PASSPHRASE: "{{ lookup('passwordstore', canonical_server_client + '/' + canonical_hostname + '/borg/remote') }}"
    with_items: "{{ canonical_db_names_unique }}"
    register: db_downloaded
    loop_control:
      loop_var: db_name
    become_user: root

  - name: Decompress the db backups
    shell: gunzip --force {{ item }}.sql.gz
    args:
      chdir: "{{ sql_dumps_dir }}"
    with_items: "{{ canonical_db_names_unique }}"
    when: acquire_db_backup.msg == "yes"
    become_user: root
  when: acquire_db_backup.msg == "yes" and db_sync_strategy == 'rsyncnet'

# Acquire a backup from a mysqldump
- block:
  - name: Make a db backup
    mysql_db:
      state: dump
      login_user: "{{ canonical_db_user }}"
      login_password: "{{ lookup('passwordstore', canonical_server_client + '/' + canonical_hostname + '/' + canonical_bare_url + '/mysql') }}"
      name: "{{ db_name }}"
      target: "/tmp/{{ db_name }}.sql"
    with_items: "{{ canonical_db_names_unique }}"
    loop_control:
      loop_var: db_name

  - name: fetch db backups
    fetch:
      src: "/tmp/{{ db_name }}.sql"
      dest: "{{ sql_dumps_dir }}/{{ db_name }}.sql"
      flat: yes
    with_items: "{{ canonical_db_names_unique }}"
    loop_control:
      loop_var: db_name

  when: acquire_db_backup.msg == "yes" and db_sync_strategy == 'livedump'
  delegate_to: "{{ canonical_server }}"
  remote_user: "{{ canonical_run_as_user }}"
  become: no

# Don't do these other steps if a) there's no db backup in borg b) the db is already downloaded.
# FIXME: We don't have a way of telling whether the db dump has been loaded or not, which is what we really need.  Figure out a command to determine that, then change the "when" on the next 4 tasks.
- name: Remove definers from Civi db
  command: perl -pi -e 's#\/\*\!5001. DEFINER=`.*`@`.*?\*\/##g' {{ canonical_crm_db_name }}.sql
  args:
    chdir: "{{ sql_dumps_dir }}"
  when: acquire_db_backup.msg == "yes"
  become_user: root

- name: Fix logging db triggers when using a separate db
  command: perl -pi -e 's/{{ canonical_crm_logging_db_name }}/{{ crm_logging_db_name }}/g' {{ canonical_crm_db_name }}.sql
  args:
    chdir: "{{ sql_dumps_dir }}"
  when: acquire_db_backup.msg == "yes" and canonical_crm_logging_db_name is not none
  become_user: root

# FIXME: This is provisionally replaced with a perl find/replace in db sync
- name: Do a search/replace for the primary URL
  command: perl -pi -e 's~{{ canonical_primary_url }}~{{ primary_url }}~g' {{ canonical_cms_db_name }}.sql
  args:
    chdir: "{{ sql_dumps_dir }}"
  when: cms == 'WordPress' and canonical_primary_url
  become_user: root

- name: Import the databases
  mysql_db:
    name: "{{ item.1 }}"
    target: "{{ sql_dumps_dir }}/{{ item.0 }}.sql"
    state: import
    login_user: "{{ db_user }}"
    login_password: "{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }}"
  when: acquire_db_backup.msg == "yes" and civicrm == 'Yes' and item.1 is defined
  become_user: root
  with_together:
   - "{{ canonical_db_names_unique }}"
   - "{{ db_names_unique }}"